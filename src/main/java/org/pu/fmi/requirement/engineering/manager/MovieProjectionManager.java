/*
 * This code has been generated by the Rebel: a code generator for modern Java.
 *
 * Drop us a line or two at feedback@archetypesoftware.com: we would love to hear from you!
 */
package org.pu.fmi.requirement.engineering.manager;

import org.pu.fmi.requirement.engineering.exception.InvalidReservationTimeException;
import org.pu.fmi.requirement.engineering.exception.SeatAlreadyReservedException;
import org.pu.fmi.requirement.engineering.model.MovieProjection;
import org.pu.fmi.requirement.engineering.model.Reservation;
import org.pu.fmi.requirement.engineering.model.ReservationRequest;
import org.pu.fmi.requirement.engineering.model.Seat;

import java.time.Duration;
import java.util.HashSet;
import java.util.Set;


public class MovieProjectionManager {
    private static final String SUCCESS_MESSAGE = "Reservation successful";
    private static final int ALLOWED_INTERVAL_FOR_RESERVATIONS = 60;
    private static final String INVALID_RESERVATION_TIME_MESSAGE = "Reservations should be made at least one hour before the movie projection";
    private static final String SEAT_ALREADY_TAKEN_MESSAGE = "Seat is already taken";

    private Set<MovieProjection> movieProjections;

    public MovieProjectionManager() {
        movieProjections = new HashSet<>();
    }

    public Set<MovieProjection> getMovieProjections() {
        return movieProjections;
    }

    public void setMovieProjections(Set<MovieProjection> movieProjections) {
        this.movieProjections = movieProjections;
    }

    /**
     * @param request
     */
    public String createReservation(ReservationRequest request) throws InvalidReservationTimeException, SeatAlreadyReservedException {
        MovieProjection movieProjection = movieProjections.stream()
                .filter(movie -> movie.getTitle().equals(request.getMovieName()))
                .findAny()
                .orElseThrow();
        validateRequestTime(request, movieProjection);
        Seat seat = movieProjection.getRoom()
                .getSeats()
                .stream()
                .filter(s -> s.getSeatNumber().equals(request.getSeatNumber()))
                .findAny()
                .orElseThrow();
        checkIfSeatIsAlreadyReserved(movieProjection.getReservations(), seat);
        Reservation reservation = new Reservation(seat, request.getUser());
        movieProjection.getReservations().add(reservation);
        return SUCCESS_MESSAGE;
    }

    private void checkIfSeatIsAlreadyReserved(Set<Reservation> reservations, Seat seat) throws SeatAlreadyReservedException {
        if(reservations.stream().anyMatch(r -> r.getSeat().getSeatNumber().equals(seat.getSeatNumber()))) {
            throw new SeatAlreadyReservedException(SEAT_ALREADY_TAKEN_MESSAGE);
        }
    }

    private void validateRequestTime(ReservationRequest request, MovieProjection movieProjection) throws InvalidReservationTimeException {
        long timeBetweenReservationAndMovieStartTime = Duration.between(request.getRequestTime(), movieProjection.getStartTime())
                .toMinutes();
        if(timeBetweenReservationAndMovieStartTime < ALLOWED_INTERVAL_FOR_RESERVATIONS) {
            throw new InvalidReservationTimeException(INVALID_RESERVATION_TIME_MESSAGE);
        }
    }
}